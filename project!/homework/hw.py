# ბანკის დავალიანების გამოთვლის პროგრამა

# This docstring summarizes the purpose, main functions, usage, and user interaction of the program.
# It is intended for the top of the file or as a module-level docstring.

# def calculate_debt(principal, annual_rate, years):
#     """
#     მარტივი პროცენტის ფორმულით საერთო დავალიანების გამოთვლა.
#     :param principal: ძირითადი თანხა (ლარი)
#     :param annual_rate: წლიური საპროცენტო განაკვეთი (%)
#     :param years: წლების რაოდენობა
#     :return: საერთო დავალიანება მითითებული წლების შემდეგ
#     """
#     # მოცემული პერიოდის პროცენტის გამოთვლა
#     interest = principal * (annual_rate / 100) * years
#     # interest ცვლადი ინახავს გამოთვლილ პროცენტს, რომელიც დაგროვდება მოცემულ წლებში

#     # ძირითადი თანხის და პროცენტის შეკრება საბოლოო დავალიანების მისაღებად
#     total_debt = principal + interest
#     # total_debt ცვლადი ინახავს მთლიან დავალიანებას, ანუ ძირითადი თანხა + პროცენტი

#     return total_debt
#     # ფუნქცია აბრუნებს საბოლოო დავალიანებას

# if __name__ == "__main__":
#     # ეს ბლოკი შესრულდება მხოლოდ მაშინ, როცა ფაილი პირდაპირ გაეშვება

#     while True:
#         # while ციკლი საშუალებას აძლევს მომხმარებელს რამდენჯერმე შეიყვანოს მონაცემები და მიიღოს შედეგი

#         principal = float(input("შეიყვანეთ საერთო თანხა: "))
#         # მომხმარებელი შეიყვანს ძირითად თანხას, input ფუნქცია იღებს სტრინგს, float გარდაქმნის რიცხვად

#         annual_rate = float(input("შეიყვანეთ წლიური პროცენტი: "))
#         # მომხმარებელი შეიყვანს წლიურ საპროცენტო განაკვეთს, ასევე გარდაქმნის float ტიპად

#         years = int(input("შეიყვანეთ წლიური რაოდენობა: "))
#         # მომხმარებელი შეიყვანს წლიური რაოდენობას, input გარდაქმნის int ტიპად

#         debt = calculate_debt(principal, annual_rate, years)
#         # calculate_debt ფუნქცია გამოითვლის საბოლოო დავალიანებას მომხმარებლის მიერ შეყვანილი მონაცემებით

#         print(f"საბოლოო დავალიანება: {debt:.2f} ლარი")
#         # შედეგი გამოისახება ეკრანზე, .2f ნიშნავს რომ ორი ათწილადი იქნება ნაჩვენები

#         change = input("გსურთ მონაცემების შეცვლა და თავიდან გამოთვლა? : ").strip().lower()
#         # მომხმარებელს ეკითხება, სურს თუ არა თავიდან გამოთვლა. strip() აშორებს ცარიელ ადგილებს, lower() გარდაქმნის პატარა ასოებად

#         if change != "დიახ":
#             # თუ პასუხი არ არის "დიახ", ციკლი დასრულდება

#                         print("ტრანზაქცია დასრულდა, ნახვამდის!")
#                         # პროგრამა აცნობებს მომხმარებელ რომ დასრულდა
            
#                         break
#                         # ციკლიდან გამოსვლა

            # ბანკის კრედიტის გამოთვლის პროგრამა (ანუ სესხის გადახდის გრაფიკი მარტივი პროცენტით)
def calculate_credit(principal, annual_rate, years):
    """
    მარტივი პროცენტის ფორმულით კრედიტის გადახდის საერთო თანხის გამოთვლა.
    :param principal: კრედიტის ძირითადი თანხა (ლარი)
    :param annual_rate: წლიური საპროცენტო განაკვეთი (%)
    :param years: წლების რაოდენობა
                :return: გადასახდელი საერთო თანხა მითითებული წლების შემდეგ
                """
interest = principal * (annual_rate / 100) * years
                # interest ცვლადი ინახავს გამოთვლილ პროცენტს, რომელიც დაგროვდება მოცემულ წლებში
            
total_payment = principal + interest
                # total_payment ცვლადი ინახავს მთლიან გადასახდელ თანხას, ანუ ძირითადი თანხა + პროცენტი
            
return total_payment
                # ფუნქცია აბრუნებს საბოლოო გადასახდელ თანხას
            
if __name__ == "__main__":
                # ეს ბლოკი შესრულდება მხოლოდ მაშინ, როცა ფაილი პირდაპირ გაეშვება
            
                while True:
                    # მომხმარებელს ვთავაზობთ აირჩიოს ოპერაცია
                    choice = input("აირჩიეთ ოპერაცია (დავალიანება/კრედიტი): ").strip().lower()
                    # მომხმარებელი ირჩევს რომელ გამოთვლას აკეთებს
            
                    if choice == "დავალიანება":
                        principal = float(input("შეიყვანეთ საერთო თანხა: "))
                        annual_rate = float(input("შეიყვანეთ წლიური პროცენტი: "))
                        years = int(input("შეიყვანეთ წლიური რაოდენობა: "))
            
                        debt = calculate_debt(principal, annual_rate, years)
                        print(f"საბოლოო დავალიანება: {debt:.2f} ლარი")
            
                    elif choice == "კრედიტი":
                        principal = float(input("შეიყვანეთ კრედიტის ძირითადი თანხა: "))
                        annual_rate = float(input("შეიყვანეთ წლიური საპროცენტო განაკვეთი: "))
                        years = int(input("შეიყვანეთ სესხის ვადა (წლებში): "))
            
                        payment = calculate_credit(principal, annual_rate, years)
                        print(f"სესხის გადახდის საერთო თანხა: {payment:.2f} ლარი")
            
                    else:
                        print("არასწორი არჩევანი. სცადეთ თავიდან.")
            
                    change = input("გსურთ მონაცემების შეცვლა და თავიდან გამოთვლა? : ").strip().lower()
                    if change != "დიახ":
                        print("ტრანზაქცია დასრულდა, ნახვამდის!")
                        break
